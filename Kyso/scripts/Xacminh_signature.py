# Xacminh_signature.py ‚Äî Ki·ªÉm tra ch·ªØ k√Ω s·ªë c·ªßa file PDF
from pathlib import Path
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography import x509

# ƒê∆∞·ªùng d·∫´n
BASE = Path(__file__).resolve().parents[1]
DOCS = BASE / "docs"
KEYS = BASE / "keys"

pdf_path = DOCS / "signed.pdf"
sig_path = DOCS / "signature.sig"
cert_path = KEYS / "signer_cert.pem"

def verify_signature(pdf_path, sig_path, cert_path):
    """Ki·ªÉm tra xem file PDF c√≥ b·ªã s·ª≠a v√† ch·ªØ k√Ω c√≥ h·ª£p l·ªá kh√¥ng."""
    print("üîç ƒêang x√°c minh ch·ªØ k√Ω...")

    if not pdf_path.exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y file PDF:", pdf_path)
        return
    if not sig_path.exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y file ch·ªØ k√Ω:", sig_path)
        return
    if not cert_path.exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y ch·ª©ng th∆∞ s·ªë:", cert_path)
        return

    # ƒê·ªçc d·ªØ li·ªáu
    data = pdf_path.read_bytes()
    signature = sig_path.read_bytes()

    # Load public key t·ª´ ch·ª©ng th∆∞ PEM
    cert_data = cert_path.read_bytes()
    cert = x509.load_pem_x509_certificate(cert_data)
    public_key = cert.public_key()

    # Ki·ªÉm tra ch·ªØ k√Ω
    try:
        public_key.verify(
            signature,
            data,
            padding.PKCS1v15(),
            hashes.SHA256()
        )
        print("‚úÖ X√°c minh th√†nh c√¥ng!")
        print("   ‚Üí Ch·ªØ k√Ω h·ª£p l·ªá v√† file PDF ch∆∞a b·ªã ch·ªânh s·ª≠a.")
    except Exception as e:
        print("‚ùå X√°c minh th·∫•t b·∫°i!")
        print("   L·ªói:", e)

if __name__ == "__main__":
    verify_signature(pdf_path, sig_path, cert_path)
