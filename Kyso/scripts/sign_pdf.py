# sign_pdf.py ‚Äî merge overlay (·∫£nh ch·ªØ k√Ω) v√†o original.pdf r·ªìi k√Ω file k·∫øt qu·∫£
from pathlib import Path
from io import BytesIO
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib.utils import ImageReader
from PyPDF2 import PdfReader, PdfWriter
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import padding

BASE = Path(__file__).resolve().parents[1]
DOCS = BASE / "docs"
ASSETS = BASE / "assets"
KEYS = BASE / "keys"

original_pdf = DOCS / "original.pdf"
signed_pdf = DOCS / "signed.pdf"
signature_img = ASSETS / "signature_img.png"
key_path = KEYS / "signer_key.pem"
sig_file = DOCS / "signature.sig"


# ====== T·∫°o overlay (·∫£nh + ch·ªØ) ======
def make_overlay(page_width, page_height, img_path, text="   Hoang Thi Quyen",
                 img_w=120, img_h=50, x=75, y=330):
    """
    T·∫°o m·ªôt l·ªõp PDF trong b·ªô nh·ªõ ch·ª©a ·∫£nh ch·ªØ k√Ω + text.
    M·∫∑c ƒë·ªãnh t·ªça ƒë·ªô (x=120, y=230) n·∫±m ƒë√∫ng v√πng ‚ÄúK√Ω t√™n (Ghi r√µ h·ªç t√™n)‚Äù theo h√¨nh b·∫°n g·ª≠i.
    """
    buf = BytesIO()
    c = canvas.Canvas(buf, pagesize=(page_width, page_height))

    if img_path.exists():
        img = ImageReader(str(img_path))
        c.drawImage(img, x, y, width=img_w, height=img_h, mask="auto")

    c.setFont("Helvetica", 10)
    c.drawString(x, y - 14, text)
    c.save()
    buf.seek(0)
    return buf


# ====== G·ªôp overlay v√†o PDF g·ªëc ======
def merge_overlay_to_pdf(original_path, out_path, overlay_img):
    reader = PdfReader(str(original_path))
    writer = PdfWriter()

    for pnum, page in enumerate(reader.pages):
        w = float(page.mediabox.width)
        h = float(page.mediabox.height)

        # ch·ªâ k√Ω trang cu·ªëi
        if pnum == len(reader.pages) - 1:
            overlay_buf = make_overlay(w, h, overlay_img)
            overlay_pdf = PdfReader(overlay_buf)
            page.merge_page(overlay_pdf.pages[0])

        writer.add_page(page)

    # copy metadata n·∫øu c√≥
    if reader.trailer and reader.trailer.get("/Info"):
        writer._info = reader.trailer["/Info"]

    with open(out_path, "wb") as f:
        writer.write(f)


# ====== K√Ω s·ªë RSA-SHA256 ======
def sign_file_rsa_sha256(file_path, private_key_path, out_sig_path):
    data = file_path.read_bytes()
    with open(private_key_path, "rb") as kf:
        private_key = serialization.load_pem_private_key(kf.read(), password=None)
    signature = private_key.sign(
        data,
        padding.PKCS1v15(),
        hashes.SHA256()
    )
    out_sig_path.write_bytes(signature)
    return signature


# ====== Ch·∫°y ch√≠nh ======
def main():
    if not original_pdf.exists():
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y original.pdf t·∫°i", original_pdf)
        return
    if not key_path.exists():
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y private key t·∫°i", key_path)
        return

    print("üìÑ ƒêang ch√®n ·∫£nh ch·ªØ k√Ω v√†o PDF...")
    merge_overlay_to_pdf(original_pdf, signed_pdf, signature_img)
    print("‚úÖ ƒê√£ t·∫°o:", signed_pdf)

    print("üîê ƒêang k√Ω file b·∫±ng RSA-SHA256...")
    signature = sign_file_rsa_sha256(signed_pdf, key_path, sig_file)
    print(f"‚ú® ƒê√£ l∆∞u ch·ªØ k√Ω ({len(signature)} bytes) t·∫°i:", sig_file)


if __name__ == "__main__":
    main()
