from pyhanko.sign import validation
from pyhanko.sign.diff_analysis import ModificationLevel
from pyhanko.pdf_utils.reader import PdfFileReader
from pyhanko.keys import load_cert_from_pemder
from pyhanko_certvalidator import ValidationContext
import hashlib, datetime, io
from datetime import timezone, timedelta
from pathlib import Path

# === C·∫§U H√åNH ===
BASE = Path(__file__).resolve().parents[1]
PDF_PATH = BASE / "docs" / "signed_pdf_pkcs7.pdf"
CERT_FILE = BASE / "keys" / "signer_cert.pem"
LOG_FILE = BASE / "scripts" / "verify_log.txt"
FIELD_NAME = "Signature1"

# === 1Ô∏è‚É£ T·∫°o ValidationContext tin c·∫≠y ===
vc = ValidationContext(trust_roots=[load_cert_from_pemder(str(CERT_FILE))])

# === 2Ô∏è‚É£ Chu·∫©n b·ªã log ===
log = io.StringIO()
def log_print(msg):
    print(msg)
    log.write(msg + "\n")

log_print("=== KI·ªÇM TRA X√ÅC TH·ª∞C CH·ªÆ K√ù PDF ===")
log_print(f"üïí Th·ªùi gian ki·ªÉm th·ª≠: {datetime.datetime.now()}")
log_print(f"üìÑ File ki·ªÉm tra: {PDF_PATH}")
log_print("====================================")

try:
    with open(PDF_PATH, "rb") as f:
        reader = PdfFileReader(f)
        embedded_sigs = reader.embedded_signatures

        if not embedded_sigs:
            log_print("‚ùå Kh√¥ng t√¨m th·∫•y ch·ªØ k√Ω n√†o trong file PDF.")
            raise SystemExit

        sig = embedded_sigs[0]
        sig_name = sig.field_name or FIELD_NAME
        log_print(f"üîç Ph√°t hi·ªán ch·ªØ k√Ω: {sig_name}")
        log_print("====================================")

        # === ƒê·ªçc /Contents v√† /ByteRange ===
        sig_dict = sig.sig_object
        contents = sig_dict.get('/Contents')
        byte_range = sig_dict.get('/ByteRange')

        log_print(f"/Contents: {len(contents)} bytes")
        log_print(f"/ByteRange: {byte_range}")

        # === 5Ô∏è‚É£ T√≠nh l·∫°i SHA256 v√πng ByteRange ===
        f.seek(0)
        data = f.read()
        ranges = list(byte_range)
        signed_data = data[ranges[0]:ranges[0]+ranges[1]] + data[ranges[2]:ranges[2]+ranges[3]]
        digest = hashlib.sha256(signed_data).hexdigest()
        log_print(f"üîë SHA256(ByteRange): {digest[:64]}... ‚úÖ")

        # === 6Ô∏è‚É£ X√°c th·ª±c ch·ªØ k√Ω ===
        status = validation.validate_pdf_signature(sig, vc)
        log_print("====================================")
        log_print("üîí K·∫æT QU·∫¢ X√ÅC TH·ª∞C CH·ªÆ K√ù:")
        log_print(status.pretty_print_details())

        # === 7Ô∏è‚É£ Th√¥ng tin ch·ª©ng th∆∞ ===
        signer_cert = status.signing_cert
        if signer_cert:
            subj = signer_cert.subject.human_friendly
            log_print("\nüìú Ch·ª©ng th∆∞ ng∆∞·ªùi k√Ω:")
            log_print(f"  üë§ Ch·ªß th·ªÉ: {subj}")
            log_print(f"  SHA1: {signer_cert.sha1_fingerprint.hex()}")
            log_print(f"  SHA256: {signer_cert.sha256_fingerprint.hex()}")
        else:
            log_print("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ch·ª©ng th∆∞ c·ªßa ng∆∞·ªùi k√Ω.")

        # === 8Ô∏è‚É£ Th·ªùi gian k√Ω ===
        if status.signer_reported_dt:
            vn_tz = timezone(timedelta(hours=7))
            local_time = status.signer_reported_dt.astimezone(vn_tz)
            log_print(f"\nüïí Th·ªùi gian k√Ω (VN): {local_time}")
        else:
            log_print("‚ö†Ô∏è Kh√¥ng c√≥ timestamp (RFC3161).")

        # === 9Ô∏è‚É£ Ki·ªÉm tra ch·ªânh s·ª≠a ===
        mod_level = getattr(status, "modification_level", None)
        if mod_level == ModificationLevel.NONE:
            log_print("‚úÖ File ch∆∞a b·ªã ch·ªânh s·ª≠a k·ªÉ t·ª´ khi k√Ω.")
        elif mod_level == ModificationLevel.FORM_FILLING:
            log_print("‚ö†Ô∏è File c√≥ thay ƒë·ªïi nh·ªè (ƒëi·ªÅn form) sau khi k√Ω.")
        else:
            log_print("‚ùå File ƒë√£ b·ªã ch·ªânh s·ª≠a sau khi k√Ω!")

        log_print("====================================")

        # === üîü T·ªïng k·∫øt ===
        if status.bottom_line:
            log_print("‚úÖ Ch·ªØ k√Ω H·ª¢P L·ªÜ v√† t√†i li·ªáu NGUY√äN V·∫∏N.")
        else:
            log_print("‚ùå Ch·ªØ k√Ω KH√îNG H·ª¢P L·ªÜ ho·∫∑c t√†i li·ªáu ƒë√£ b·ªã thay ƒë·ªïi.")

except Exception as e:
    log_print(f"‚ö†Ô∏è L·ªói khi x√°c minh ch·ªØ k√Ω: {e}")

# === üíæ Ghi log ===
with open(LOG_FILE, "w", encoding="utf-8") as out:
    out.write(log.getvalue())

log_print(f"\nüìÅ Log ƒë√£ l∆∞u t·∫°i: {LOG_FILE}")
