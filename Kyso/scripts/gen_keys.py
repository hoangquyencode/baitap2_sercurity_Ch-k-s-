from OpenSSL import crypto
from pathlib import Path

# === C·∫•u h√¨nh th∆∞ m·ª•c ===
BASE = Path(__file__).resolve().parents[1]
KEYS_DIR = BASE / "keys"
KEYS_DIR.mkdir(exist_ok=True)

key_path = KEYS_DIR / "signer_key.pem"
cert_path = KEYS_DIR / "signer_cert.pem"

# === Th√¥ng tin c√° nh√¢n cho ch·ª©ng th∆∞ ===
country_name = "VN"
locality_name = "TH√ÅI NGUY√äN"
common_name = "HO√ÄNG TH·ªä QUY√äN"
serial_number = "CCCD:012345678900"  # thay b·∫±ng CCCD th·∫≠t n·∫øu mu·ªën
organization_name = "KySo Demo"
organization_unit = "Demo Unit"
email = "hoangthiquyen@example.com"

# === Sinh kh√≥a RSA 2048-bit ===
key = crypto.PKey()
key.generate_key(crypto.TYPE_RSA, 2048)

# === T·∫°o ch·ª©ng th∆∞ t·ª± k√Ω (self-signed certificate) ===
cert = crypto.X509()
subject = cert.get_subject()
subject.C = country_name
subject.L = locality_name
subject.O = organization_name
subject.OU = organization_unit
subject.CN = common_name
subject.serialNumber = serial_number
subject.emailAddress = email

cert.set_serial_number(1000)
cert.gmtime_adj_notBefore(0)
cert.gmtime_adj_notAfter(365 * 24 * 60 * 60)  # 1 nƒÉm
cert.set_issuer(subject)
cert.set_pubkey(key)
cert.sign(key, "sha256")

# === L∆∞u kh√≥a v√† ch·ª©ng th∆∞ ra file ===
with open(key_path, "wb") as f:
    f.write(crypto.dump_privatekey(crypto.FILETYPE_PEM, key))

with open(cert_path, "wb") as f:
    f.write(crypto.dump_certificate(crypto.FILETYPE_PEM, cert))

print("‚úÖ ƒê√£ t·∫°o kh√≥a v√† ch·ª©ng th∆∞ t·∫°i:", KEYS_DIR)
print("üë§ Ch·ªß th·ªÉ:", f"{common_name} ({serial_number})")
print("üìç Khu v·ª±c:", locality_name)
print("üìß Email:", email)
